
// -------- data structure DOUBLY LINKED LIST ---------------
// EQUIVALENT OF:
// template <class Parent,class Child> class takes_LinkedList
// ----------------------------------------------------------
#ifndef ZZ_takes_LINKED_LIST2_INCLUDED
#define ZZ_takes_LINKED_LIST2_INCLUDED

class Student;
class Takes;

// ----------------------------------------------------------
// description of the cooperating classes
// ----------------------------------------------------------
class takes_LinkedList2Parent {
public:
    PTR(Takes) tail;
    takes_LinkedList2Parent(){ tail=NULL; }
};

class takes_LinkedList2Child : public takes_Ring2Element {
public:
    takes_LinkedList2Child() : takes_Ring2Element(){ }
};

// the following class is used when Parent==Child
class takes_LinkedList2ParentLinkedList2Child : public takes_Ring2Element {
public:
    PTR(Takes) tail;
    takes_LinkedList2ParentLinkedList2Child() : takes_Ring2Element(){ tail=NULL; }
};
// ----------------------------------------------------------

class takes_LinkedList2 : takes_Ring2 {

public:
    static PTR(Takes) const tail(PTR(Student) p);
    static PTR(Takes) const head(PTR(Student) p);
    static void addHead(PTR(Student) p, PTR(Takes) c);
    static void addTail(PTR(Student) p, PTR(Takes) c);
    static void append(PTR(Student) p,PTR(Takes) c1, PTR(Takes) c2);
    static void insert(PTR(Takes) c1, PTR(Takes) c2);
    static void remove(PTR(Student) p, PTR(Takes) c);
    static PTR(Takes) const next(PTR(Student) p, PTR(Takes) c);
    static PTR(Takes) const prev(PTR(Student) p, PTR(Takes) c);
    static PTR(Takes) const nextRing(PTR(Takes) c);
    static PTR(Takes) const prevRing(PTR(Takes) c);
    static void sort(takes_sortFun cmpFun, PTR(Student) p);
    static void merge(PTR(Takes) s,PTR(Takes) t,PTR(Student) p);
    static void setTail(PTR(Student) p,PTR(Takes) c,int check);

    // historical DOL compatible interface
    static void del(PTR(Student) p, PTR(Takes) c) { remove(p,c); }
    static void add(PTR(Student) p, PTR(Takes) c) { addHead(p,c);}
    static void ins(PTR(Takes) c1, PTR(Takes) c2) { insert(c1,c2); }
    static PTR(Takes) child(PTR(Student) p);
    static void set(PTR(Student) p,PTR(Takes) c){ setTail(p,c,0);}
    static PTR(Takes) const fwd(PTR(Takes) c){return nextRing(c);}
    static PTR(Takes) const bwd(PTR(Takes) c){return prevRing(c);}
};

class takes_LinkedList2Iterator : public takes_Ring2Iterator {
public:
    takes_LinkedList2Iterator() : takes_Ring2Iterator(){}
    takes_LinkedList2Iterator(const PTR(Student) p) : takes_Ring2Iterator(){ start(p); }
    void start(const PTR(Student) p);
    PTR(Takes) fromHead(PTR(Student) p);
    PTR(Takes) fromTail(PTR(Student) p);
};
    
#endif // ZZ_takes_LINKED_LIST2_INCLUDED
